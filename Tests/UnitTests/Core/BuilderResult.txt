using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;

namespace ConsoleApp1
{
	/// <summary>
	/// Builder for the class <see cref="User">User</see>
	/// </summary>
	public class UserBuilder
	{
		private Guid _id;
		private string _firstName;
		private string _lastName;
		private string _email;
		private string _phone;
		private bool _isAlive;
		private int _age;
		private List<string> _addresses;
		private IList<string> _otherAddresses;
		private IEnumerable<int> _ages;
		private Dictionary<string, int> _phones;
		private IDictionary<string, int> _otherPhones;
		private Collection<int> _collection;
		private ICollection<int> _otherCollection;
		private int[] _intArray;
		private int[][] _intMatrix;
		private bool[] _boolArray;
		private bool[][] _boolMatrix;

		/// <summary>
		/// Create a new instance for the <see cref="UserBuilder">UserBuilder</see>
		/// </summary>
		public UserBuilder()
		{
			Reset();
		}

		/// <summary>
		/// Reset all properties' to the default value
		/// </summary>
		/// <returns>Returns the <see cref="UserBuilder">UserBuilder</see> with the properties reseted</returns>
		public UserBuilder Reset()
		{
			_id = default;
			_firstName = default;
			_lastName = default;
			_email = default;
			_phone = default;
			_isAlive = default;
			_age = default;
			_addresses = new List<string>();
			_otherAddresses = new List<string>();
			_ages = Enumerable.Empty<int>();
			_phones = new Dictionary<string, int>();
			_otherPhones = new Dictionary<string, int>();
			_collection = new Collection<int>();
			_otherCollection = new Collection<int>();
			_intArray = Array.Empty<int>();
			_intMatrix = Array.Empty<int[]>();
			_boolArray = Array.Empty<bool>();
			_boolMatrix = Array.Empty<bool[]>();

			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="List{T}" /> of <see cref="string" /> for the property <paramref name="addresses">addresses</paramref>
		/// </summary>
		/// <param name="addresses">A value of type List of string will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="addresses">addresses</paramref> defined</returns>
		public UserBuilder WithAddresses(List<string> addresses)
		{
			_addresses = addresses;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="string"/> will be added to the collection Addresses
		/// </summary>
		/// <param name="item">A value of type string will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection Addresses with one more item</returns>
		public UserBuilder WithAddressesItem(string item)
		{
			_addresses.Add(item);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="IList{T}" /> of <see cref="string" /> for the property <paramref name="otherAddresses">otherAddresses</paramref>
		/// </summary>
		/// <param name="otherAddresses">A value of type IList of string will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="otherAddresses">otherAddresses</paramref> defined</returns>
		public UserBuilder WithOtherAddresses(IList<string> otherAddresses)
		{
			_otherAddresses = otherAddresses;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="string"/> will be added to the collection OtherAddresses
		/// </summary>
		/// <param name="item">A value of type string will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection OtherAddresses with one more item</returns>
		public UserBuilder WithOtherAddressesItem(string item)
		{
			_otherAddresses.Add(item);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="IEnumerable{T}" /> of <see cref="int" /> for the property <paramref name="ages">ages</paramref>
		/// </summary>
		/// <param name="ages">A value of type IEnumerable of int will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="ages">ages</paramref> defined</returns>
		public UserBuilder WithAges(IEnumerable<int> ages)
		{
			_ages = ages;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="int"/> will be added to the collection Ages
		/// </summary>
		/// <param name="item">A value of type int will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection Ages with one more item</returns>
		public UserBuilder WithAgesItem(int item)
		{
			_ages = Enumerable.Append(_ages, item);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="Dictionary{T,T}" /> of <see cref="string" /> and <see cref="int" /> for the property <paramref name="phones">phones</paramref>
		/// </summary>
		/// <param name="phones">A value of type Dictionary of string will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="phones">phones</paramref> defined</returns>
		public UserBuilder WithPhones(Dictionary<string, int> phones)
		{
			_phones = phones;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="string, int"/> will be added to the collection Phones
		/// </summary>
		/// <param name="item">A value of type string, int will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection Phones with one more item</returns>
		public UserBuilder WithPhonesItem(string key, int value)
		{
			_phones.Add(key, value);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="IDictionary{T,T}" /> of <see cref="string" /> and <see cref="int" /> for the property <paramref name="otherPhones">otherPhones</paramref>
		/// </summary>
		/// <param name="otherPhones">A value of type IDictionary of string will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="otherPhones">otherPhones</paramref> defined</returns>
		public UserBuilder WithOtherPhones(IDictionary<string, int> otherPhones)
		{
			_otherPhones = otherPhones;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="string, int"/> will be added to the collection OtherPhones
		/// </summary>
		/// <param name="item">A value of type string, int will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection OtherPhones with one more item</returns>
		public UserBuilder WithOtherPhonesItem(string key, int value)
		{
			_otherPhones.Add(key, value);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="Collection{T}" /> of <see cref="int" /> for the property <paramref name="collection">collection</paramref>
		/// </summary>
		/// <param name="collection">A value of type Collection of int will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="collection">collection</paramref> defined</returns>
		public UserBuilder WithCollection(Collection<int> collection)
		{
			_collection = collection;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="int"/> will be added to the collection Collection
		/// </summary>
		/// <param name="item">A value of type int will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection Collection with one more item</returns>
		public UserBuilder WithCollectionItem(int item)
		{
			_collection.Add(item);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="ICollection{T}" /> of <see cref="int" /> for the property <paramref name="otherCollection">otherCollection</paramref>
		/// </summary>
		/// <param name="otherCollection">A value of type ICollection of int will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="otherCollection">otherCollection</paramref> defined</returns>
		public UserBuilder WithOtherCollection(ICollection<int> otherCollection)
		{
			_otherCollection = otherCollection;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="int"/> will be added to the collection OtherCollection
		/// </summary>
		/// <param name="item">A value of type int will the added to the collection</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the collection OtherCollection with one more item</returns>
		public UserBuilder WithOtherCollectionItem(int item)
		{
			_otherCollection.Add(item);
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="int[]" /> for the property <paramref name="intArray">intArray</paramref>
		/// </summary>
		/// <param name="intArray">A value of type int[] will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="intArray">intArray</paramref> defined</returns>
		public UserBuilder WithIntArray(int[] intArray)
		{
			_intArray = intArray;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="int"/> will be added to the array IntArray
		/// </summary>
		/// <param name="item">A value of type int will the added to the array</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the array IntArray with one more item</returns>
		public UserBuilder WithIntArrayItem(int item)
		{
			_intArray = _intArray.Append(item).ToArray();
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="int[][]" /> for the property <paramref name="intMatrix">intMatrix</paramref>
		/// </summary>
		/// <param name="intMatrix">A value of type int[][] will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="intMatrix">intMatrix</paramref> defined</returns>
		public UserBuilder WithIntMatrix(int[][] intMatrix)
		{
			_intMatrix = intMatrix;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="int[]"/> will be added to the array IntMatrix
		/// </summary>
		/// <param name="item">A value of type int will the added to the array</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the array IntMatrix with one more item</returns>
		public UserBuilder WithIntMatrixItem(int[] item)
		{
			_intMatrix = _intMatrix.Append(item).ToArray();
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="bool[]" /> for the property <paramref name="boolArray">boolArray</paramref>
		/// </summary>
		/// <param name="boolArray">A value of type bool[] will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="boolArray">boolArray</paramref> defined</returns>
		public UserBuilder WithBoolArray(bool[] boolArray)
		{
			_boolArray = boolArray;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="bool"/> will be added to the array BoolArray
		/// </summary>
		/// <param name="item">A value of type bool will the added to the array</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the array BoolArray with one more item</returns>
		public UserBuilder WithBoolArrayItem(bool item)
		{
			_boolArray = _boolArray.Append(item).ToArray();
			return this;
		}

		/// <summary>
		/// Set a value of type <see cref="bool[][]" /> for the property <paramref name="boolMatrix">boolMatrix</paramref>
		/// </summary>
		/// <param name="boolMatrix">A value of type bool[][] will the defined for the property</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the property <paramref name="boolMatrix">boolMatrix</paramref> defined</returns>
		public UserBuilder WithBoolMatrix(bool[][] boolMatrix)
		{
			_boolMatrix = boolMatrix;
			return this;
		}

		/// <summary>
		/// An item of type <see cref="bool[]"/> will be added to the array BoolMatrix
		/// </summary>
		/// <param name="item">A value of type bool will the added to the array</param>
		/// <returns>Returns the <see cref="UserBuilder" /> with the array BoolMatrix with one more item</returns>
		public UserBuilder WithBoolMatrixItem(bool[] item)
		{
			_boolMatrix = _boolMatrix.Append(item).ToArray();
			return this;
		}

		/// <summary>
		/// Build a class of type <see cref="User">User</see> with all the defined values
		/// </summary>
		/// <returns>Returns a <see cref="User">User</see> class</returns>
		public User Build()
		{
			return new User
			{
				Id = _id,
				FirstName = _firstName,
				LastName = _lastName,
				Email = _email,
				Phone = _phone,
				IsAlive = _isAlive,
				Age = _age,
				Addresses = _addresses,
				OtherAddresses = _otherAddresses,
				Ages = _ages,
				Phones = _phones,
				OtherPhones = _otherPhones,
				Collection = _collection,
				OtherCollection = _otherCollection,
				IntArray = _intArray,
				IntMatrix = _intMatrix,
				BoolArray = _boolArray,
				BoolMatrix = _boolMatrix,
			};
		}
	}
}